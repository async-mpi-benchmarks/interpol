#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>


typedef int32_t MpiComm;

typedef int32_t MpiReq;

#define WORLD 0

void register_init(uint64_t cycles, double time);

void register_send(uint64_t cycles_lo,
                   uint64_t cycles_hi,
                   size_t bytes,
                   MpiComm comm,
                   int32_t current_rank,
                   int32_t partner_rank,
                   int32_t tag);

void register_recv(uint64_t cycles_lo,
                   uint64_t cycles_hi,
                   size_t bytes,
                   MpiComm comm,
                   int32_t current_rank,
                   int32_t partner_rank,
                   int32_t tag);

void register_isend(uint64_t cycles_lo,
                    uint64_t cycles_hi,
                    size_t bytes,
                    MpiComm comm,
                    MpiReq req,
                    int32_t current_rank,
                    int32_t partner_rank,
                    int32_t tag);

void register_irecv(uint64_t cycles_lo,
                    uint64_t cycles_hi,
                    size_t bytes,
                    MpiComm comm,
                    MpiReq req,
                    int32_t current_rank,
                    int32_t partner_rank,
                    int32_t tag);

void register_wait(uint64_t cycles_lo,
                   uint64_t cycles_hi,
                   MpiReq req,
                   int32_t current_rank);

void register_finalize(uint64_t cycles,
                       double time,
                       int32_t rank);

int MPI_Init(int *argc,
             char ***argv);

int MPI_Send(const void *buf,
             int count,
             MPI_Datatype datatype,
             int dest,
             int tag,
             MPI_Comm comm);

int MPI_Recv(void *buf,
             int count,
             MPI_Datatype datatype,
             int source, int tag,
             MPI_Comm comm,
             MPI_Status *status);

int MPI_Wait(MPI_Request *request,
             MPI_Status *status);

int MPI_Isend(const void *buf,
              int count,
              MPI_Datatype datatype,
              int dest,
              int tag,
              MPI_Comm comm,
              MPI_Request *request);

int MPI_Irecv(void *buf,
              int count,
              MPI_Datatype datatype,
              int source,
              int tag,
              MPI_Comm comm,
              MPI_Request * request);

int MPI_Finalize();